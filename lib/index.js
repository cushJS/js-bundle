// Generated by CoffeeScript 2.3.0
var Bundle, JSBundle, MagicString, NameResolver, cush, fs, log, polyfills, sorcery, uhoh;

NameResolver = require('./NameResolver');

MagicString = require('@cush/magic-string');

sorcery = require('@cush/sorcery');

Bundle = require('cush/lib/Bundle');

uhoh = require('cush/utils/uhoh');

cush = require('cush');

log = require('lodge');

fs = require('saxon/sync');

polyfills = {
  require: fs.read(__dirname + '/../polyfills/require.js')
};

JSBundle = (function() {
  class JSBundle extends Bundle {
    _wrapSourceMapURL(url) {
      return '//# sourceMappingURL=' + url;
    }

    _concat(assets, packages) {
      var files, resolveName, result;
      result = new MagicString.Bundle;
      // polyfills
      result.prepend(polyfills.require + '\n');
      // asset lookup by filename
      files = {};
      resolveName = NameResolver(this, packages);
      assets.forEach((asset) => {
        var code, filename, ref;
        if (asset.ext !== '.js') {
          uhoh('Unsupported asset type: ' + asset.path(), 'BAD_ASSET');
        }
        code = new MagicString(asset.content);
        filename = this.relative(asset.path());
        files[filename] = asset;
        // swap out any `require` calls
        if ((ref = asset.deps) != null) {
          ref.forEach(function(dep) {
            if (!dep.asset) {
              return log.warn('Missing asset:', dep);
            } else {
              return code.overwrite(dep.start, dep.end, resolveName(dep.asset));
            }
          });
        }
        // wrap assets with a `__d` call
        code.trim();
        code.indent('  ');
        if (this.dev) {
          code.prepend(`/* ${filename} */\n`);
        }
        code.prependRight(0, `__d(${resolveName(asset)}, function(module, exports) {\n`);
        code.append('\n});\n');
        // add to the bundle
        return result.addSource({
          filename,
          content: code
        });
      });
      // require the main module
      result.append(`\nrequire(${resolveName(this.main)});`);
      // create the bundle string
      result = {
        content: result.toString(),
        map: result.generateMap({
          includeContent: false
        })
      };
      // trace the mappings to their original sources
      result.map = sorcery(result, {
        getMap: function(filename) {
          return files[filename].map || false;
        },
        includeContent: false
      });
      return result;
    }

  };

  JSBundle.id = 'js';

  JSBundle.exts = ['.js'];

  JSBundle.plugins = ['sucrase', 'buble', 'uglify-js'];

  return JSBundle;

}).call(this);

module.exports = JSBundle;
